version: '3.8'

services:
  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"  # Expose metrics on port 9100
    networks:
      - monitoring
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 100M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Custom Prometheus configuration
    ports:
      - "9090:9090"  # Web UI on port 9090
    networks:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'  # Retain metrics for 15 days
    depends_on:
      - node-exporter
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 300M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Web UI on port 3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=your_password  # Set admin password
    networks:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 300M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/login"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: monitoring_bridge



      prometheus.yml


{global:
  scrape_interval: 15s  # How often to scrape targets

scrape_configs:
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['node-exporter:9100']  # Prometheus scrapes metrics from Node Exporter
}



bash:
docker-compose up -d

Accessing the Services:
Node Exporter: http://<your-server-ip>:9100/metrics

Prometheus: http://<your-server-ip>:9090

Grafana: http://<your-server-ip>:3000

Login to Grafana using the default credentials (admin / your_password), then configure Prometheus as a data source in Grafana (URL: http://prometheus:9090).

Now you have Node Exporter, Prometheus, and Grafana running together, collecting system metrics and visualizing them.
      
