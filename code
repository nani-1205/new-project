version: '3.8'

services:
  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"  # Expose metrics on port 9100
    networks:
      - monitoring
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 150M
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9100/metrics"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Custom Prometheus configuration
      - prometheus_data:/prometheus  # Persistent storage
    ports:
      - "9090:9090"  # Web UI on port 9090
    networks:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'  # Retain metrics for 15 days
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - node-exporter
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 500M
    restart: unless-stopped
    labels:
      com.example.service: prometheus
      com.example.environment: production
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/ready"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Web UI on port 3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password  # Use Docker secrets
      - GF_USERS_ALLOW_SIGN_UP=false  # Disable user sign-ups
      - GF_SERVER_DOMAIN=yourdomain.com  # Custom domain
    networks:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 750M
        reservations:
          memory: 400M
    volumes:
      - grafana_data:/var/lib/grafana  # Persistent storage
    secrets:
      - grafana_admin_password
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/login"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: monitoring_bridge

volumes:
  prometheus_data:
  grafana_data:

secrets:
  grafana_admin_password:
    file: ./grafana_admin_password.txt




      prometheus.yml


{global:
  scrape_interval: 15s  # How often to scrape targets

scrape_configs:
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['node-exporter:9100']  # Prometheus scrapes metrics from Node Exporter
}



bash:
docker-compose up -d

Accessing the Services:
Node Exporter: http://<your-server-ip>:9100/metrics

Prometheus: http://<your-server-ip>:9090

Grafana: http://<your-server-ip>:3000

Login to Grafana using the default credentials (admin / your_password), then configure Prometheus as a data source in Grafana (URL: http://prometheus:9090).

Now you have Node Exporter, Prometheus, and Grafana running together, collecting system metrics and visualizing them.
      
